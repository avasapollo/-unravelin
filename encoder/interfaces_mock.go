// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package encoder is a generated GoMock package.
package encoder

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockHashEncoder is a mock of HashEncoder interface
type MockHashEncoder struct {
	ctrl     *gomock.Controller
	recorder *MockHashEncoderMockRecorder
}

// MockHashEncoderMockRecorder is the mock recorder for MockHashEncoder
type MockHashEncoderMockRecorder struct {
	mock *MockHashEncoder
}

// NewMockHashEncoder creates a new mock instance
func NewMockHashEncoder(ctrl *gomock.Controller) *MockHashEncoder {
	mock := &MockHashEncoder{ctrl: ctrl}
	mock.recorder = &MockHashEncoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHashEncoder) EXPECT() *MockHashEncoderMockRecorder {
	return m.recorder
}

// Encode mocks base method
func (m *MockHashEncoder) Encode(s string) string {
	ret := m.ctrl.Call(m, "Encode", s)
	ret0, _ := ret[0].(string)
	return ret0
}

// Encode indicates an expected call of Encode
func (mr *MockHashEncoderMockRecorder) Encode(s interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encode", reflect.TypeOf((*MockHashEncoder)(nil).Encode), s)
}

// Decode mocks base method
func (m *MockHashEncoder) Decode(s string) (string, error) {
	ret := m.ctrl.Call(m, "Decode", s)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decode indicates an expected call of Decode
func (mr *MockHashEncoderMockRecorder) Decode(s interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockHashEncoder)(nil).Decode), s)
}
